!!!

- @hyphenate_data_attrs = false
- size = 50

%html
  %head
    :css
      body {
        background-color: linen;
      }
      #left {
        float: left;
        margin-right: 20px;
      }
      .square {
        margin: 3px;
        background: #ddd;
      }
      .ball {
        width: #{size}px;
        height: #{size}px;
        border-radius: #{size/2}px;
        border: 1px solid black;
      }

    :javascript
      window.onload = function () {
        var n;
        for (n = 0; n < 81; n++) {
          var elm = document.getElementById("b" + n);
          ku_show_setup(elm);
          elm.onclick = function(event) {
            var target = event.target;
            if (target.ku_showing_solved) {
              ku_show_setup(target);
            }
            else {
              ku_show_solved(target);
            }
          }
        }
      }

      function ku_all(func) {
        var n;
        for (n = 0; n < 81; n++) {
          var elm = document.getElementById("b" + n);
          func(elm);
        }
      }

      function ku_show_setup_all() {
        ku_all(ku_show_setup);
      }

      function ku_show_solved_all() {
        ku_all(ku_show_solved);
      }

      function ku_show_setup(elm) {
        elm.style.background = elm.dataset.setup_color;
        elm.ku_showing_solved = false;
      }

      function ku_show_solved(elm) {
        elm.style.background = elm.dataset.solved_color;
        elm.ku_showing_solved = true;
      }

      function ku_new_puzzle() {
        window.location.href = '#{url "/"}' + '?level=' + document.getElementById("level").value;
      }

  %body
    #left
      %table{style: "margin-bottom: 5px"}
        - 3.times do |row|
          %tr
            - 3.times do |col|
              %td
                %table.square
                  - 3.times do |sub_row|
                    %tr
                      - 3.times do |sub_col|
                        - n = ((row*3)+sub_row)*9 + col*3 + sub_col
                        %td
                          .ball{id: "b#{n}", data: {setup_color: colors[n][:setup] || "#f8f8f8", solved_color: colors[n][:solved]}}

      %button{onclick: "ku_show_setup_all()"}
        Setup
      %button{onclick: "ku_show_solved_all()"}
        Solved
      %button{onclick: "ku_new_puzzle()"}
        New

      Difficulty:
      %select{id: "level"}
        - WebSudoku::LEVELS.each do |text, number|
          %option{value: number, selected: number == level}
            = text

    %div{style: "padding-top: 3px"}
      Do you love to play #{link_to("ColorKu", "http://colorku.com/")}?
      So do I!
    %p
      But what do you do when
      you've gone through all the puzzle cards that come with it, or
      they've gotten too hard, or maybe you've lost them or your pet
      bunny chewed them up?  That's where <em>SpudoKu</em> can help!
    %p
      <b>SpudoKu?  What's that?</b>
    %p
      This website is SpudoKu!  SpudoKu
      can fetch billions of puzzles from the fine folks at
      #{link_to("websudoku.com", "http://websudoku.com/")} (thanks,
      fine folks!) and display them in your browser with all the ColorKu
      colors you've come to know and love!  Puzzles come in your choice
      of <em>Easy, Medium, Hard,</em> or, for the ColorKu super-heroes
      among us, <em>Evil</em> (bwa ha ha).
    %p
      SpudoKu can also show you the complete solution to the ColorKu puzzle
      by clicking the "Solved" button, or it can show you the solution
      of each ball individually by clicking on that ball.
    %p
      <b>In the works:</b> I intend to hook SpudoKu up to my sudoku solver
      to provide <em>hints</em> for when you get stuck.
    %p
      <b>And then . . .</b> I'd like to do an Android app.  If you're on
      iPhone, sorry.  If you're on BlackBerry, I'm even sorrier.
